import DAO.CadastroClienteDAO;
import Model.Cadastro_Cliente;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;

public class CadastroClienteDAOTest {

    //declarando que é um teste
    @Test
    //criando metodo de testar cadastro do cliente
    public void testCadastroCliente() {
        CadastroClienteDAO dao = new CadastroClienteDAO();

        //inserindo novo cliente
        Cadastro_Cliente cliente = new Cadastro_Cliente(
                null,
                "mula",
                "09877654411",
                null,
                "Rua Teste, 123",
                30881170,
                "mula@teste.com",
                "11988887221"
        );

        //salva cliente novo
        int idGerado = dao.salvarCliente(cliente);
        //vereifica se o cliente foi salvo corretamente por meio do Id
        assertTrue(idGerado > 0, "ID do cliente deveria ser maior que 0");

        //verifica se o cliente existe
        boolean existe = dao.clienteExiste(idGerado);

        //garante que o cliente exista
        assertTrue(existe, "O cliente deveria existir no banco de dados");
    }

    @Test
    public void testEditarCliente() {
        CadastroClienteDAO dao = new CadastroClienteDAO();

        Cadastro_Cliente cliente = new Cadastro_Cliente(
                //editando dados do cliente
                null, "Maria", "98765432122", null, "Rua A", 11111111, "maria@teste.com", "11999998888"
        );
        //salva dados novos
        int id = dao.salvarCliente(cliente);

        //define o id que o banco gerou para o cliente
        cliente.setId_cliente(id);
        cliente.setNome_cliente("Maria Editada");
        cliente.setEmail("editado@teste.com");


        //verifica se cliente foi editado corretamente
        boolean editado = dao.editarCliente(cliente);
        assertTrue(editado, "Cliente deveria ser editado com sucesso");

        //busca o id d cliente para verificar dados atualizados
        Cadastro_Cliente clienteEditado = dao.buscarPorId(id);
        assertEquals("Maria Editada", clienteEditado.getNome_cliente());
        assertEquals("editado@teste.com", clienteEditado.getEmail());
    }

    @Test
    public void testExcluirCliente() {
        CadastroClienteDAO dao = new CadastroClienteDAO();

        //Cria um objeto Cadastro_Cliente com os dados de um cliente
        Cadastro_Cliente cliente = new Cadastro_Cliente(
                null, "João", "00011122233", null, "Rua B", 22222222, "joao@teste.com", "11988887777"
        );
        //Salva o cliente no banco de dados
        int id = dao.salvarCliente(cliente);

        //Tenta excluir o cliente do banco de dados pelo ID gerado.
        boolean excluido = dao.excluirCliente(id);
        assertTrue(excluido, "Cliente deveria ser excluído");

        //Verifica se o cliente ainda existe no banco após a tentativa de exclusão.
        boolean aindaExiste = dao.clienteExiste(id);
        assertFalse(aindaExiste, "Cliente não deveria mais existir");
    }

    @Test
    public void testListarClientes() {
        CadastroClienteDAO dao = new CadastroClienteDAO();

        //chama o metodo para listar os objetos presentes no banco
        List<Cadastro_Cliente> lista = dao.listarClientes();
        //verificar se um objeto NÃO é nulo.
        assertNotNull(lista, "Lista de clientes não pode ser nula");
        //garante que o metodo nao retorne uma lista invalida
        assertTrue(lista.size() >= 0, "Lista de clientes deve conter zero ou mais itens");

        //Percorre toda a lista e imprime no console
        for (Cadastro_Cliente c : lista) {
            System.out.println("Cliente: " + c.getNome_cliente() + ", ID: " + c.getId_cliente());
        }
    }
}




=========================================================================

package DAO;

import Model.Cadastro_Cliente;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CadastroClienteDAO {
    private final String URL = "jdbc:mysql://localhost:3306/TCC_gil";
    private final String USUARIO = "root";
    private final String SENHA = "";

    public int salvarCliente(Cadastro_Cliente cliente) {
        String sql = "INSERT INTO Cadastro_Cliente (nome_cliente, cpf, cnpj, endereco, cep, email, telefone) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            stmt.setString(1, cliente.getNome_cliente());
            stmt.setString(2, cliente.getCpf());
            stmt.setString(3, cliente.getCnpj());
            stmt.setString(4, cliente.getEndereco());
            stmt.setInt(5, cliente.getCep());
            stmt.setString(6, cliente.getEmail());
            stmt.setString(7, cliente.getTelefone());

            int affectedRows = stmt.executeUpdate();

            if (affectedRows > 0) {
                ResultSet rs = stmt.getGeneratedKeys();
                if (rs.next()) {
                    return rs.getInt(1);
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    public boolean clienteExiste(int id) {
        String sql = "SELECT * FROM Cadastro_Cliente WHERE id_cliente = ?";
        try (Connection conn = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean editarCliente(Cadastro_Cliente cliente) {
        String sql = "UPDATE Cadastro_Cliente SET nome_cliente = ?, cpf = ?, cnpj = ?, endereco = ?, cep = ?, email = ?, telefone = ? WHERE id_cliente = ?";
        try (Connection conn = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, cliente.getNome_cliente());
            stmt.setString(2, cliente.getCpf());
            stmt.setString(3, cliente.getCnpj());
            stmt.setString(4, cliente.getEndereco());
            stmt.setInt(5, cliente.getCep());
            stmt.setString(6, cliente.getEmail());
            stmt.setString(7, cliente.getTelefone());
            stmt.setInt(8, cliente.getId_cliente());

            return stmt.executeUpdate() > 0;

        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean excluirCliente(int id) {
        String sql = "DELETE FROM Cadastro_Cliente WHERE id_cliente = ?";
        try (Connection conn = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    public List<Cadastro_Cliente> listarClientes() {
        List<Cadastro_Cliente> lista = new ArrayList<>();
        String sql = "SELECT * FROM Cadastro_Cliente";

        try (Connection conn = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                Cadastro_Cliente cliente = new Cadastro_Cliente(
                        rs.getInt("id_cliente"),
                        rs.getString("nome_cliente"),
                        rs.getString("cpf"),
                        rs.getString("cnpj"),
                        rs.getString("endereco"),
                        rs.getInt("cep"),
                        rs.getString("email"),
                        rs.getString("telefone")
                );
                lista.add(cliente);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return lista;
    }

    public Cadastro_Cliente buscarPorId(int id) {
        String sql = "SELECT * FROM Cadastro_Cliente WHERE id_cliente = ?";
        try (Connection conn = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                return new Cadastro_Cliente(
                        rs.getInt("id_cliente"),
                        rs.getString("nome_cliente"),
                        rs.getString("cpf"),
                        rs.getString("cnpj"),
                        rs.getString("endereco"),
                        rs.getInt("cep"),
                        rs.getString("email"),
                        rs.getString("telefone")
                );
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

}



